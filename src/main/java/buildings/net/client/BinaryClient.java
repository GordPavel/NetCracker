package buildings.net.client;import buildings.interfaces.Building;import util.BuildingFactory;import util.Buildings;import util.factories.DwellingFactory;import util.factories.HotelFactory;import util.factories.OfficeFactory;import java.io.IOException;import java.io.OutputStream;import java.io.PrintWriter;import java.math.BigDecimal;import java.net.Socket;import java.nio.file.Files;import java.nio.file.Paths;import java.util.Iterator;import java.util.Scanner;public class BinaryClient{    public static void main( String[] args ){        try( Socket socket = new Socket( "localhost" , 5673 ) ; OutputStream outputStream = socket.getOutputStream() ;             Scanner scanner = new Scanner( socket.getInputStream() ) ;             PrintWriter printWriter = new PrintWriter( Files.newBufferedWriter( Paths.get( args[ 2 ] ) ) ) ){            Iterator<String> buildingsTypes = Files.lines( Paths.get( args[ 1 ] ) ).iterator();            Iterator<Building> buildings = Files.lines( Paths.get( args[ 0 ] ) ).map( string -> {                Buildings.setFactory( buildingFactory( buildingsTypes.next() ) );                return Buildings.readBuilding( new Scanner( string ) );            } ).iterator();            while( buildings.hasNext() ){                System.out.print( "Client sends building " );                Buildings.outputBuilding( buildings.next() , outputStream );                String answer = scanner.nextLine();                try{                    Double price = new BigDecimal( answer ).doubleValue();                    System.out.printf( "%.3f\n" , price );                    printWriter.printf( "%.3f\n" , price );                }catch( NumberFormatException e ){                    if( answer.equals( "Building is arrested" ) ){                        System.out.println( "arrested" );                        printWriter.println( "arrested" );                    }else{                        throw e;                    }                }                Thread.sleep( 500 );            }        }catch( IOException | InterruptedException e ){            e.printStackTrace();        }    }    private static BuildingFactory buildingFactory( String string ){        switch( string ){            case "Dwelling":                return new DwellingFactory();            case "Hotel":                return new HotelFactory();            case "OfficeBuilding":                return new OfficeFactory();            default:                throw new IllegalArgumentException();        }    }}