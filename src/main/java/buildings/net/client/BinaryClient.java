package buildings.net.client;import buildings.interfaces.Building;import util.BuildingFactory;import util.Buildings;import util.factories.DwellingFactory;import util.factories.HotelFactory;import util.factories.OfficeFactory;import java.io.IOException;import java.io.PrintWriter;import java.net.Socket;import java.nio.file.Files;import java.nio.file.Paths;import java.util.ArrayList;import java.util.Iterator;import java.util.List;import java.util.Scanner;import java.util.stream.Collectors;public class BinaryClient{    public static void main( String[] args ){        List<Integer> prices = new ArrayList<>();        try( Socket socket = new Socket( "localhost" , 5673 ) ;             PrintWriter printWriter = new PrintWriter( socket.getOutputStream() ) ;             Scanner scanner = new Scanner( socket.getInputStream() ) ){            for( Building building : getBuildingsFromFiles( args[ 0 ] , args[ 1 ] ) ){                printWriter.println();                prices.add( scanner.nextInt() );            }        }catch( IOException e ){            e.printStackTrace();        }        try( PrintWriter writer = new PrintWriter( Files.newBufferedWriter( Paths.get( args[ 2 ] ) ) ) ){            for( Integer price : prices ){                writer.println( price );            }        }catch( IOException e ){            e.printStackTrace();        }    }    private static List<Building> getBuildingsFromFiles( String buildingsFilePath ,                                                         String buildingsTypesFilePath ) throws IOException{        Iterator<BuildingFactory> buildingTypes =                Files.lines( Paths.get( buildingsTypesFilePath ) ).map( BinaryClient::getBuildingFactory ).iterator();        return Files.lines( Paths.get( buildingsFilePath ) )                    .map( buildingString -> getBuilding( buildingTypes , buildingString ) )                    .collect( Collectors.toList() );    }    private static Building getBuilding( Iterator<BuildingFactory> buildingTypes , String buildingString ){        Buildings.setFactory( buildingTypes.next() );        try( Scanner scanner = new Scanner( buildingString ) ){            return Buildings.readBuilding( scanner );        }catch( IOException e ){            throw new IllegalArgumentException();        }    }    private static BuildingFactory getBuildingFactory( String buildingTypeString ){        switch( buildingTypeString ){            case "Dwelling":                return new DwellingFactory();            case "Office":                return new OfficeFactory();            case "Hotel":                return new HotelFactory();            default:                throw new IllegalArgumentException();        }    }}